template<typename T>
Queue<T>::Queue()
{
	_obj = NULL;
}

template<typename T>
void Queue<T>::push(Object<T> *obj)
{
	obj->useCount=1; //очередь получает объект раньше всех потоков
	_lock.lock();
	if(_obj!=NULL) _obj->free();
	_obj = obj;
	_lock.unlock();
	return;
}

template<typename T>
Object<T> *Queue<T>::waitForNewObject(Object<T> *curObj)
{
	Object<T> *oldobj = curObj;
	while(1)
	{
		_lock.lock();
		curObj = _obj;
		_lock.unlock();
		if(curObj==NULL || oldobj==curObj)
		{
			std::this_thread::sleep_for(std::chrono::milliseconds(1));
		}
		else
		{
			curObj->busy();
			break;
		}
	}
	return curObj;
}

/*
*Ожидание нового элемента в очереди с таймаутом в миллисекундах.
*Возвращает NULL, если время ожидания истекло.
*/
template<typename T>
Object<T> *Queue<T>::waitForNewObject(Object<T> *curObj, uint32_t timeout)
{
	Object<T> *oldobj = curObj;
	uint32_t timeWait = 0;
	
	while(1)
	{
		_lock.lock();
		curObj = _obj;
		_lock.unlock();
		if(curObj==NULL || oldobj==curObj)
		{
			std::this_thread::sleep_for(std::chrono::milliseconds(1));
			timeWait++;
			if(timeWait > timeout) return NULL;
		}
		else
		{
			curObj->busy();
			break;
		}
	}
	return curObj;
}

template<typename T>
Object<T>::Object()
{
	obj = new T();
	useCount = 0;
}

template<typename T>
Object<T>::~Object()
{
	delete obj;
}

template<typename T>
void Object<T>::free()
{
	if(useCount==1)
	{
		delete this;
		return;
	}
	useLock.lock();
	useCount--;
	useLock.unlock();
	return;
}

template<typename T>
void Object<T>::busy()
{
	useLock.lock();
	useCount++;
	useLock.unlock();
	return;
}
